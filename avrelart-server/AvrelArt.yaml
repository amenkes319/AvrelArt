openapi: 3.0.0
info:
  title: AvrelArt API
  version: 1.0.0
servers:
  - url: https://avrelart.com/api
paths:
  /paintings:
    get:
      tags: [paintings]
      summary: Get all paintings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Painting'

  /paintings/{id}:
    get:
      tags: [paintings]
      summary: Get painting by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Painting'
        '404':
          description: Painting not found

  /paintings/type/{type}:
    get:
      tags: [paintings]
      summary: Get paintings by type
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - landscape
              - abstract
              - workonpaper
              - italyseries
              - unprecedentedtimes
              - assemblage
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Painting'
        '400':
          description: Invalid type

  
  /admin/paintings:
    post:
      tags: [paintings]
      summary: Create a new painting
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                data:
                  type: string
                  format: json
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Painting created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Painting'
        '500':
          description: Error reading or writing data

  /admin/paintings/{id}:
    put:
      tags: [paintings]
      summary: Update a painting by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the painting to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Painting'
      responses:
        '200':
          description: Painting updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Painting'
        '404':
          description: Painting not found
        '500':
          description: Error reading or writing data

    delete:
      tags: [paintings]
      summary: Delete a painting by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the painting to delete
      responses:
        '200':
          description: Painting deleted successfully
        '404':
          description: Painting not found
        '500':
          description: Error reading or writing data

  /photographs:
    get:
      tags: [photographs]
      summary: Get all photographs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photograph'

  /photographs/{id}:
    get:
      tags: [photographs]
      summary: Get photograph by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photograph'
        '404':
          description: Photograph not found

  /photographs/type/{type}:
    get:
      tags: [photographs]
      summary: Get photographs by type
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum:
              - landscape
              - portrait
      responses:
        '200':
          description: Photographs of specified type
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Photograph'
        '400':
          description: Invalid type
          
  /admin/photographs:
    post:
      tags: [photographs]
      summary: Create a new photograph
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                data:
                  type: string
                  format: json
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Photograph created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photograph'
        '500':
          description: Error reading or writing data

  /admin/photographs/{id}:
    put:
      tags: [photographs]
      summary: Update a photograph by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the photograph to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Photograph'
      responses:
        '200':
          description: Photograph updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photograph'
        '404':
          description: Photograph not found
        '500':
          description: Error reading or writing data

    delete:
      tags: [photographs]
      summary: Delete a photograph by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the photograph to delete
      responses:
        '200':
          description: Photograph deleted successfully
        '404':
          description: Photograph not found
        '500':
          description: Error reading or writing data
  
  /achievements:
    get:
      tags: [achievements]
      summary: Get all achievements
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Achievement'

  /achievements/{id}:
    get:
      tags: [achievements]
      summary: Get achievement by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Achievement'
        '404':
          description: Achievement not found

  /admin/achievements:
    post:
      tags: [achievements]
      summary: Create a new achievement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Achievement'
      responses:
        '201':
          description: Achievement created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Achievement'
        '500':
          description: Error reading or writing data

  /admin/achievements/{id}:
    put:
      tags: [achievements]
      summary: Update an achievement by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the achievement to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Achievement'
      responses:
        '200':
          description: Achievement updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Achievement'
        '404':
          description: Achievement not found
        '500':
          description: Error reading or writing data

    delete:
      tags: [achievements]
      summary: Delete an achievement by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the achievement to delete
      responses:
        '200':
          description: Achievement deleted successfully
        '404':
          description: Achievement not found
        '500':
          description: Error reading or writing data

components:
  schemas:
    Achievement:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: 'The Best Painting'
        description:
          type: string
          example: 'This is the best painting ever'
        type:
          type: string
          enum:
            - exhibition
            - award
            - publication
      required:
        - id
        - title
        - description
        - type
    Painting:
      type: object
      properties:
        id:
          type: integer
          example: 1
        filename:
          type: string
          example: 'painting.jpg'
        title:
          type: string
          example: 'Eruption!'
        description:
          type: string
          example: 'This is a painting of a volcano erupting'
        medium:
          type: string
          example: 'Acrylic on Canvas'
        size:
          type: string
          example: '24" x 36"'
        price:
          type: number
          format: float
          example: $1000.00
        type:
          type: string
          enum:
            - landscape
            - abstract
            - workonpaper
            - italyseries
            - unprecedentedtimes
            - assemblage
      required:
        - id
        - filename
        - title
        - description
        - medium
        - size
        - price
        - type
    Photograph:
      type: object
      properties:
        id:
          type: integer
          example: 1
        filename:
          type: string
          example: 'photograph.jpg'
        title:
          type: string
          example: 'Volcano'
        description:
          type: string
          example: 'This is a photograph of a volcano'
        type:
          type: string
          enum:
            - landscape
            - portrait
      required:
        - id
        - filename
        - title
        - description
        - type
